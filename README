 SEMT - Compile-time symbolic differentiation via C++ templates
============================================================================

The SEMT library provides an easy way to define arbitrary functions
and obtain their derivatives via C++ expression templates.

This is a comprehensive extension of Zvi Guttermans original work
accompanying his Ph.D. thesis
"Symbolic Pre-computation for Numerical Applications",
see http://www.cs.technion.ac.il/~ssdl/thesis/finished/2004/ZviGutterman/.

Because of this origin, all code is free, see the LICENSE
file for details.

Usage
---------
Run
    make doc
to create the documentation with doxygen.

There are several example programs:
<dl>
    <dt>examples/semt_examples.cpp</dt>
    <dt>These are used in the documentation.</dd>

    <dt>examples/semt_speed.cpp</dt>
    <dd>A test run on a mapping R^10 -> R^10.</dd>

    <dt>semt_jacobian</dt>
    <dd>Implementation of Newton's method.</dd>

    <dt>semt_check</dt>
    <dd>Some crude tests.</dd>
</dl>

You can run
    make [release | gprof | gcov] <binary>
to compile a corresponding binary.
Using "release" mode enables compiler optimizations and places the
binary in the ./Release folder.
Using "gprof" creates a call graph and it's timings in
./gprof/<binary>_<arguments>,
where you can supply arguments via the ${ARGS} make variable.
Using "gcov" outputs coverage results into ./gcov.

Contact me at st_gille (at) web.de for any questions.
